// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	ID   string `json:"id"`
	Text string `json:"text"`
}

type Match struct {
	ID         string      `json:"id"`
	CreatedAt  string      `json:"createdAt"`
	IsFinished bool        `json:"isFinished"`
	Comments   []Comment   `json:"comments"`
	Scoreboard *Scoreboard `json:"scoreboard"`
}

type Player struct {
	Username string `json:"username"`
	Role     Role   `json:"role"`
	IsAlive  bool   `json:"isAlive"`
	Kills    int    `json:"kills"`
}

type Scoreboard struct {
	Players []Player `json:"players"`
}

type Role string

const (
	RoleVillager Role = "VILLAGER"
	RoleMafia    Role = "MAFIA"
)

var AllRole = []Role{
	RoleVillager,
	RoleMafia,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleVillager, RoleMafia:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
